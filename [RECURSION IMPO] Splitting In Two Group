a. Write a recursive function which counts the number of ways the array
could be split in two groups, so that the sum of items in both groups is
equal. Each number in the array must belong to one of the two groups.
Print the value returned.

b. Write a recursive function which keeps track of ways an array could be
split in two groups, so that the sum of items in both groups is equal. Each
number in the array must belong to one of the two groups. Return type of
function should be ArrayList<String>. Print the value returned.
(Two group seperated by " and ").

c. Write a recursive function which keeps track of ways an array could be
split in two groups, so that the sum of items in both groups is equal. Each
number in the array must belong to one of the two groups. Return type of
function should be void. Print the two groups, each time you find a
successful split. (Two group seperated by space of tab "\t").

Example(To be used only for expected output):
Input:
5
1 3 5 7 0

output
4
[1 7 0  and 3 5 , 1 7  and 3 5 0 , 3 5 0  and 1 7 , 3 5  and 1 7 0 ]
1 7 0 	3 5
1 7 	3 5 0
3 5 0 	1 7
3 5 	1 7 0


#include <bits/stdc++.h>
using namespace std;
vector<string> res;
void helper(vector<int>&vec, int idx, int set1,int set2, string ans1, string ans2){
    if(idx==vec.size()){
        if(set1==set2){
            cout<<ans1<<" "<<ans2<<endl;
            return;
        }
        return;
    }
    helper(vec,idx+1,set1+vec[idx],set2,ans1+to_string(vec[idx])+" ",ans2);
    helper(vec,idx+1,set1,set2+vec[idx],ans1,ans2+to_string(vec[idx])+" "); 
}
void helperArray(vector<int>&vec, int idx, int set1,int set2, string ans1, string ans2){
    if(idx==vec.size()){
        if(set1==set2){
            res.push_back(ans1);
            res.push_back(ans2);
            return;
        }
        return;
    }
    helperArray(vec,idx+1,set1+vec[idx],set2,ans1+to_string(vec[idx])+" ",ans2);
    helperArray(vec,idx+1,set1,set2+vec[idx],ans1,ans2+to_string(vec[idx])+" "); 
}
int helperCount(vector<int> &arr, int vidx, int set1, int set2)
{
    if (vidx == arr.size())
    {
        if (set1 == set2)
        {
            
            return 1;
        }
        return 0;
    }

    int count = 0;
    
    //make recursive tree to understand it;
    count += helperCount(arr, vidx + 1, set1 + arr[vidx], set2);
    count += helperCount(arr, vidx + 1, set1, set2 + arr[vidx]);
    return count;
}

int main() { 
    int n;
    cin>>n;
    vector<int> arr (n);
    for(int i = 0; i<n; i++){
        cin>>arr[i];
    }
    
     cout<<helperCount(arr, 0, 0, 0)<<endl;
    helperArray(arr,0,0,0,"","");
    cout<<"[";
    for(int i = 1; i<res.size(); i++){
        cout<<res[i-1]<<" and " <<res[i];
        if(i!=res.size()-1){
            cout<<", ";
        }
        i++;
    }
    cout<<"]";
    cout<<endl;
    helper(arr,0,0,0,"","");
    return 0;
}
