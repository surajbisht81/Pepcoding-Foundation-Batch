#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;
int mazePathCount(int sr, int sc, int er, int ec)
{
   if(sr==er and sc == ec){
       return 1;
   }
    int count = 0;
  if(sr<er)
       count+=mazePathCount(sr+1,sc,er,ec);
   
  if(sc<ec)
        count+=mazePathCount(sr,sc+1,er,ec);
    
    
    return count;
}
vector<string> mazePathArray(int sr,int sc,int er, int ec){
    if(sr==er and sc== ec){
        vector<string> base;
        base.push_back("");
        return base;
    }
    vector<string> myAns;
     if (sc < ec)
    {
        vector<string> horizontal = mazePathArray(sr, sc + 1, er, ec);
        for (string s : horizontal)
            myAns.push_back("H" + s);
    }
    if(sr<er){
        vector<string> vertical = mazePathArray(sr+1,sc,er,ec);
        for(string s : vertical){
            myAns.push_back("V"+s);
        }
        
    }
    
    
    return myAns;
}
void mazePath(int sr, int sc, int er, int ec, string ans){
    if(sr==er and sc== ec){
        cout<< ans  <<endl;
    }
    if(sr<er){
        mazePath(sr+1,sc,er,ec,ans+"H");
    }
    if(sc<ec){
        mazePath(sr,sc+1,er,ec,ans+"V");
    }
}

int main() {
    int row, col;
    cin>>row>>col;
    int startRow = 0;
    int startCol = 0;
    int endRow = row;
    int endCol = col;
    cout<<mazePathCount(startRow, startCol,endRow-1, endCol-1)<<endl;
    vector<string> res = mazePathArray(startRow, startCol,endRow-1, endCol-1);
    cout<<"[";
    for(size_t i = 0 ; i<res.size(); i++){
        cout<<res[i];
        if(i!=res.size()-1){
            cout<<", ";
        }
    }
    
    cout<<"]"<<endl;
    mazePath(startRow, startCol,endRow-1, endCol-1,"");
    
    return 0;
}
