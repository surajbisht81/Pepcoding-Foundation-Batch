import java.io.*;
import java.util.*;

public class Main {

  public static class PriorityQueue {
ArrayList < Integer > data;

        public PriorityQueue() {
            data = new ArrayList < > ();
        }

        public void upheapify(int ci) {
            if( ci == 0 ){
                return;
            }
            int pi = (ci - 1) / 2;
            if( data.get( ci ) < data.get( pi ) ){
                int temp = data.get( pi );
                data.set( pi, data.get( ci ) );
                data.set( ci, temp );
                upheapify( pi );
            }
        }


        public void downheapify(int pi) {
            
            int lci = 2 * pi + 1;
            int rci = 2 * pi + 2;
            
            int swapidx =  pi;
            
            if( lci < data.size() && data.get( pi ) > data.get( lci ) ){
                swapidx = lci;
            }
            
            if( rci < data.size() && data.get( pi ) > data.get( rci ) ){
                if( data.get( rci ) < data.get( lci ) ){
                    swapidx = rci;
                }
            }
            
            if( swapidx != pi ){
                int temp = data.get( pi );
                data.set( pi, data.get( swapidx ) );
                data.set( swapidx, temp );
                downheapify( swapidx ); 
            }
            
        }

        public void add(int val) {
            data.add( val );
            upheapify( data.size() - 1 );
        }

        public int remove() {
            if( data.size() == 0 ){
                System.out.println( "Underflow" );
                return -1;
            }else{
                int rv = data.get( 0 );
                int liv = data.get( data.size() - 1 );
                data.set( 0, liv );
                data.remove( data.size() - 1 );
                downheapify( 0 );
                return rv;
            }
        }

        public int peek() {
            if( data.size() == 0 ){
                System.out.println( "Underflow" );
                return -1;
            }else{
                return data.get( 0 );
            }
        }

        public int size() {
            return data.size();
        }
  }

  public static void main(String[] args) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    PriorityQueue qu = new PriorityQueue();

    String str = br.readLine();
    while (str.equals("quit") == false) {
      if (str.startsWith("add")) {
        int val = Integer.parseInt(str.split(" ")[1]);
        qu.add(val);
      } else if (str.startsWith("remove")) {
        int val = qu.remove();
        if (val != -1) {
          System.out.println(val);
        }
      } else if (str.startsWith("peek")) {
        int val = qu.peek();
        if (val != -1) {
          System.out.println(val);
        }
      } else if (str.startsWith("size")) {
        System.out.println(qu.size());
      }
      str = br.readLine();
    }
  }
}
