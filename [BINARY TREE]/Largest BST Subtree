  static class helper{
      boolean isbst = true;
      int max = Integer.MIN_VALUE;
      int min = Integer.MAX_VALUE;
      int size = 0;
      Node bstroot = null;
  }
  public static helper findLargestBST(Node temp){
      if(temp == null){
          return new helper();
      }
      helper lans =  findLargestBST(temp.left);
      helper rans = findLargestBST(temp.right);
      helper myans = new helper();
      
      myans.isbst = lans.isbst && rans.isbst && temp.data > lans.max && temp.data < rans.min;
      if(myans.isbst){
          myans.size = lans.size + rans.size + 1;
          myans.bstroot = temp;
      
      if(temp.left != null){
          myans.min = lans.min;
      }else{
          myans.min = temp.data;
      }
      if(temp.right != null){
          myans.max = rans.max;
      }else{
          myans.max = temp.data;
      }
      }else{
          if(lans.size >= rans.size){
            myans.size = lans.size;
            myans.bstroot = lans.bstroot;
          }else{
              myans.size = rans.size;
              myans.bstroot = rans.bstroot;
          }
    }
    return myans;
  }
  
  public static void main(String[] args) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    int n = Integer.parseInt(br.readLine());
    Integer[] arr = new Integer[n];
    String[] values = br.readLine().split(" ");
    for (int i = 0; i < n; i++) {
      if (values[i].equals("n") == false) {
        arr[i] = Integer.parseInt(values[i]);
      } else {
        arr[i] = null;
      }
    }

    Node root = construct(arr);
    helper ans = findLargestBST(root);
    System.out.println(ans.bstroot.data + "@" + ans.size);
