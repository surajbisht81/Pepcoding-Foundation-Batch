  public static class pair{
      boolean isBST = true;
      int max = Integer.MIN_VALUE;
      int min = Integer.MAX_VALUE;
  }
  public static pair isBSTree(Node tempNode){
      if(tempNode == null){
          return new pair();
      }
      pair answerFromLeft = isBSTree(tempNode.left);
      pair answerFromRight = isBSTree(tempNode.right);
      pair Answer = new pair();
      Answer.isBST = (answerFromLeft.isBST && answerFromRight.isBST && 
      tempNode.data > answerFromLeft.max && tempNode.data < answerFromRight.min);
      if(Answer.isBST){
          if(tempNode.left!=null){
              Answer.min = answerFromLeft.min;
          }else{
              Answer.min =  tempNode.data;
          }
          if(tempNode.right!=null){
              Answer.max = answerFromRight.max;
          }else{
              Answer.max = tempNode.data;
          }
      }
      
      return Answer;
  }

 
  
  public static void main(String[] args) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    int n = Integer.parseInt(br.readLine());
    Integer[] arr = new Integer[n];
    String[] values = br.readLine().split(" ");
    for (int i = 0; i < n; i++) {
      if (values[i].equals("n") == false) {
        arr[i] = Integer.parseInt(values[i]);
      } else {
        arr[i] = null;
      }
    }

    Node root = construct(arr);
    
    pair ans  = isBSTree(root);
   
