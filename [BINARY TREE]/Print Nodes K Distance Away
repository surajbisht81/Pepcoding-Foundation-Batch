 public static ArrayList<Node> NodeToRootPath(Node node, int data){
   if(node == null){
    return new ArrayList<Node> ();
    
   }   else if(node.data == data){
    ArrayList<Node> baseCase = new ArrayList<> ();
    baseCase.add(node);
    return baseCase;
  }   
    ArrayList<Node> LeftAns = NodeToRootPath(node.left,data);
    if(LeftAns.size()>0)
    {
    LeftAns.add(node);
    return LeftAns;
    }
    ArrayList<Node> RightAns = NodeToRootPath(node.right,data);
    if(RightAns.size()>0)
    {
    RightAns.add(node);
    
    }
    return RightAns;
  }
   public static void printKLevelDown(Node node, int k, Node blocked){
      if(node==null || k < 0){
          return;
      }
      if(k==0){
          System.out.println(node.data);
          return;
      }
      if(node.left!=blocked){
          printKLevelDown(node.left,k-1,blocked);
      }
       if(node.right!=blocked){
          printKLevelDown(node.right,k-1,blocked);
      }
  }
  public static void printKNodesFar(Node node, int data, int k) {
    ArrayList<Node> ntrp = NodeToRootPath(node,data);
    for(int i = 0; i<ntrp.size() && i<=k; i++){
        Node blockAge = null;
        if(i>0){
            blockAge = ntrp.get(i - 1);
        }
        printKLevelDown(ntrp.get(i),k-i,blockAge);
    }
