import java.io.*;
import java.util.*;

public class Main {
   static class Edge {
      int src;
      int nbr;
      int wt;

      Edge(int src, int nbr, int wt) {
         this.src = src;
         this.nbr = nbr;
         this.wt = wt;
      }
   }

   public static void main(String[] args) throws Exception {
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

      int vtces = Integer.parseInt(br.readLine());
      ArrayList<Edge>[] graph = new ArrayList[vtces];
      for (int i = 0; i < vtces; i++) {
         graph[i] = new ArrayList<>();
      }

      int edges = Integer.parseInt(br.readLine());
      for (int i = 0; i < edges; i++) {
         String[] parts = br.readLine().split(" ");
         int v1 = Integer.parseInt(parts[0]);
         int v2 = Integer.parseInt(parts[1]);
         int wt = Integer.parseInt(parts[2]);
         graph[v1].add(new Edge(v1, v2, wt));
         graph[v2].add(new Edge(v2, v1, wt));
      }

      // write your code here
      int[] visited =  new int[ graph.length];
      boolean isBP = true;
      for(int v = 0; v<graph.length; v++){
          if(visited[v]==0){
              boolean  ans = checkBP(graph,v, visited);
              if(ans == false){
                  isBP = false;
                  break;
              }
          }
      }
      System.out.println(isBP);
   }
   static class Pair{
       int vtx;
       int gp;
       Pair(int v, int g){
           this.vtx = v;
           this.gp = g;
       }
       
   }
   public static boolean checkBP(ArrayList<Edge>[] graph, int src, int[] visited){
       Queue<Pair> qu = new LinkedList<>();
       qu.add( new Pair(src, 1) );
       while(qu.size() > 0){
           Pair cp =  qu.remove();
           if(visited[cp.vtx] != 0){
              if(visited[cp.vtx]%2 == cp.gp){
                  continue;
              } else
              {
                  return false;
              }
           }else{
            visited[cp.vtx]  = cp.gp;
               
           }
           for(int e = 0; e<graph[cp.vtx].size(); e++){
               Edge ce = graph[cp.vtx].get(e);
               if(visited[ce.nbr] == 0){
                   qu.add(new Pair(ce.nbr,cp.gp+1));
               }
           }
       } 
       return true;
   }
}
