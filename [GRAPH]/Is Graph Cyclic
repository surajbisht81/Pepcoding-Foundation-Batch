import java.io.*;
import java.util.*;

public class Main {
   static class Edge {
      int src;
      int nbr;
      int wt;

      Edge(int src, int nbr, int wt) {
         this.src = src;
         this.nbr = nbr;
         this.wt = wt;
      }
   }

   public static void main(String[] args) throws Exception {
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

      int vtces = Integer.parseInt(br.readLine());
      ArrayList<Edge>[] graph = new ArrayList[vtces];
      for (int i = 0; i < vtces; i++) {
         graph[i] = new ArrayList<>();
      }

      int edges = Integer.parseInt(br.readLine());
      for (int i = 0; i < edges; i++) {
         String[] parts = br.readLine().split(" ");
         int v1 = Integer.parseInt(parts[0]);
         int v2 = Integer.parseInt(parts[1]);
         int wt = Integer.parseInt(parts[2]);
         graph[v1].add(new Edge(v1, v2, wt));
         graph[v2].add(new Edge(v2, v1, wt));
      }

      // write your code here
      boolean[] visited = new boolean[graph.length];
      boolean isCycle = false;
      
      for(int v = 0; v<graph.length; v++){
          if(visited[v] == false)
          {
              boolean ans = findCycleBFS(graph,v, visited);
              if(ans ==  true){
              isCycle = true;
              break;
              }
          }
      }
      System.out.println(isCycle);
   }
   public static boolean findCycleBFS(ArrayList<Edge> [] graph, int src, boolean[] visited){
       Queue<Integer> qu = new LinkedList<> ();
       qu.add(src);
       while(qu.size() > 0){
           int cp = qu.remove();
           if(visited[cp] == true){
               return true;
           }else{
               visited[cp] = true;
           }
           
             for(int e = 0; e<graph[cp].size(); e++){
           Edge ce = graph[cp].get(e);
           if(visited[ce.nbr] == false){
               qu.add(ce.nbr);
           }
       }
       }
       return false;
   }
}
