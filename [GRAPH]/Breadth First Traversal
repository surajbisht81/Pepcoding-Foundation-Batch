import java.io.*;
import java.util.*;

public class Main {
   static class Edge {
      int src;
      int nbr;

      Edge(int src, int nbr) {
         this.src = src;
         this.nbr = nbr;
      }
   }

   public static void main(String[] args) throws Exception {
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

      int vtces = Integer.parseInt(br.readLine());
      ArrayList<Edge>[] graph = new ArrayList[vtces];
      for (int i = 0; i < vtces; i++) {
         graph[i] = new ArrayList<>();
      }

      int edges = Integer.parseInt(br.readLine());
      for (int i = 0; i < edges; i++) {
         String[] parts = br.readLine().split(" ");
         int v1 = Integer.parseInt(parts[0]);
         int v2 = Integer.parseInt(parts[1]);
         graph[v1].add(new Edge(v1, v2));
         graph[v2].add(new Edge(v2, v1));
      }

      int src = Integer.parseInt(br.readLine());
      bfs(graph,src);

   }
   static class Pair{
       int vtx;
       String path;
       Pair(int v, String p){
           this.vtx = v;
           this.path = p;
       }
   }
   public static void bfs(ArrayList<Edge> [] graph, int src){
       Queue<Pair> qu = new LinkedList<> ();
       qu.add(new Pair(src, ""+src));
       boolean[] visited = new boolean[ graph.length ];
       while(qu.size() > 0){
           Pair cp = qu.remove();
           if(visited[cp.vtx] ==  true){
               continue;
           }else{
               visited[cp.vtx] = true;
           }
           System.out.println(cp.vtx + "@"+cp.path);
           for(int e = 0; e<graph[cp.vtx].size(); e++){
               Edge ce = graph[cp.vtx].get(e);
               if(visited[ce.nbr]==false){
                   qu.add(new Pair(ce.nbr, cp.path+ce.nbr));
               }
           }
       }
   }
}
