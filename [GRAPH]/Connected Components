import java.io.*;
import java.util.*;

public class Main {
   static class Edge {
      int src;
      int nbr;
      int wt;

      Edge(int src, int nbr, int wt) {
         this.src = src;
         this.nbr = nbr;
         this.wt = wt;
      }
   }

   public static void main(String[] args) throws Exception {
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

      int vtces = Integer.parseInt(br.readLine());
      ArrayList<Edge>[] graph = new ArrayList[vtces];
      for (int i = 0; i < vtces; i++) {
         graph[i] = new ArrayList<>();
      }

      int edges = Integer.parseInt(br.readLine());
      for (int i = 0; i < edges; i++) {
         String[] parts = br.readLine().split(" ");
         int v1 = Integer.parseInt(parts[0]);
         int v2 = Integer.parseInt(parts[1]);
         int wt = Integer.parseInt(parts[2]);
         graph[v1].add(new Edge(v1, v2, wt));
         graph[v2].add(new Edge(v2, v1, wt));
      }

      ArrayList<ArrayList<Integer>> comps = new ArrayList<>();
      
      boolean[] visited = new boolean[graph.length];
      for(int currentVertex = 0; currentVertex<vtces; currentVertex++){
          if(visited[currentVertex] == false){
          ArrayList<Integer> currAns = new ArrayList<> ();
          findConnection(graph, currentVertex, currAns, visited);
          comps.add(currAns);
          }
      }
      
      System.out.println(comps);
   }
   public static void findConnection(ArrayList<Edge>[] graph, int start, ArrayList<Integer> ans, boolean[] visited){
       visited[start] =  true;
       ans.add(start);
       for(int x = 0; x <graph[start].size(); x++){
           Edge ce = graph[start].get(x);
           if(visited[ce.nbr] ==  false){
               findConnection(graph, ce.nbr, ans, visited);
           }
       }
      // visited[start] = false;}
   
}
}
