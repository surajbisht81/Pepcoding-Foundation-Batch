import java.io.*;
import java.util.*;

public class Main {
   static class Edge {
      int src;
      int nbr;
      int wt;

      Edge(int src, int nbr, int wt) {
         this.src = src;
         this.nbr = nbr;
         this.wt = wt;
      }
   }

   public static void main(String[] args) throws Exception {
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

      int vtces = Integer.parseInt(br.readLine());
      ArrayList<Edge>[] graph = new ArrayList[vtces];
      for (int i = 0; i < vtces; i++) {
         graph[i] = new ArrayList<>();
      }

      int edges = Integer.parseInt(br.readLine());
      for (int i = 0; i < edges; i++) {
         String[] parts = br.readLine().split(" ");
         int v1 = Integer.parseInt(parts[0]);
         int v2 = Integer.parseInt(parts[1]);
         int wt = Integer.parseInt(parts[2]);
         graph[v1].add(new Edge(v1, v2, wt));
         graph[v2].add(new Edge(v2, v1, wt));
      }

      prims(graph);
   }
   static class helper implements Comparable<helper>{
       int vtx;
       int par;
       int wt;
       helper(int v, int p, int w){
           this.vtx = v;
           this.par = p;
           this.wt = w;
       }
       public int compareTo(helper other){
           return this.wt - other.wt;
       }
   }
   public static void prims(ArrayList<Edge>[] graph){
       PriorityQueue< helper> pq = new PriorityQueue<>();
       boolean[] visited = new boolean[ graph.length];
       pq.add(new helper(0,-1,0));
       while(pq.size() > 0){
           helper cp =  pq.remove();
           if(visited[cp.vtx] == true){
               continue;
           }else{
               visited[cp.vtx] = true;
           }
           if(cp.par != -1){
               System.out.println("[" + cp.vtx + "-" + cp.par +"@"+cp.wt+"]");
           }
           for(int e = 0; e<graph[cp.vtx].size(); e++){
               Edge ce = graph[cp.vtx].get(e);
               if(visited[ce.nbr] == false){
                   pq.add(new helper(ce.nbr,cp.vtx,ce.wt));
               }
           }
       }
   }

}
