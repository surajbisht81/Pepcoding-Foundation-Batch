import java.io.*;
import java.util.*;

public class Main {

  public static class HashMap<K, V> {
    private class HMNode {
      K key;
      V value;

      HMNode(K key, V value) {
        this.key = key;
        this.value = value;
      }
    }

    private int size; // n
    private LinkedList<HMNode>[] buckets; // N = buckets.length

    public HashMap() {
      initbuckets(4);
      size = 0;
    }

    private void initbuckets(int N) {
      buckets = new LinkedList[N];
      for (int bi = 0; bi < buckets.length; bi++) {
        buckets[bi] = new LinkedList<>();
      }
    }

    private int findBucketIndex( K key ){
        int hc = key.hashCode();
        if( hc < 0 ){
            hc = -hc;
        }
        
        int bi = hc % buckets.length;
        return bi;
    }
    
    private int findDataIndex( int bi, K key ){
        int idx = 0;
        for( HMNode temp : buckets[ bi ] ){
            if( temp.key.equals( key ) ){
                return idx;
            }
            idx++;
        }
        return -1;
    }

    private void reshuffle() throws Exception{
        LinkedList<HMNode>[] oldBuckets = buckets; 
        initbuckets( oldBuckets.length * 2 );
        size = 0;
        for( int i = 0 ; i < oldBuckets.length ; i++ ){
            for( HMNode temp : oldBuckets[ i ] ){
                put( temp.key, temp.value );
            }
        }
    }

    public void put(K key, V value) throws Exception {
        
        int bi = findBucketIndex( key );
        
        int di = findDataIndex( bi, key );
        
        if( di == -1 ){
            buckets[bi].addLast( new HMNode( key, value ) );
            size++;
        }else{
            HMNode temp = buckets[bi].get( di );
            temp.value = value;
        }
        
        if( (  1.0 * size / buckets.length) > 2.0 ){
            reshuffle();
        }
        
    }

    public V get(K key) throws Exception {
        
        int bi = findBucketIndex( key );
        
        int di = findDataIndex( bi, key );
        
        if( di == -1 ){
           return null;
        }else{
            HMNode temp = buckets[bi].get( di );
            return temp.value;
        }
    }

    public boolean containsKey(K key) {
        int bi = findBucketIndex( key );
        
        int di = findDataIndex( bi, key );
        
        if( di == -1 ){
            return false;
        }else{
            return true;
        }
    }

    public V remove(K key) throws Exception {
        
        int bi = findBucketIndex( key );
        
        int di = findDataIndex( bi, key );
        
        if( di == -1 ){
            return null;
        }else{
            size--;
            HMNode temp = buckets[bi].remove( di );
            return temp.value;
        }
    }

    public ArrayList<K> keyset() throws Exception {
        ArrayList<K> set = new ArrayList<>();
        
         for( int i = 0 ; i < buckets.length ; i++ ){
            for( HMNode temp : buckets[ i ] ){
                set.add( temp.key );
            }
        }
        
        return set;
    }

    public int size() {
        return size;
    }

   public void display() {
      System.out.println("Display Begins");
      for (int bi = 0; bi < buckets.length; bi++) {
        System.out.print("Bucket" + bi + " ");
        for (HMNode node : buckets[bi]) {
          System.out.print( node.key + "@" + node.value + " ");
        }
        System.out.println(".");
      }
      System.out.println("Display Ends");
  }
}

  public static void main(String[] args) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    HashMap<String, Integer> map = new HashMap();

    String str = br.readLine();
    while (str.equals("quit") == false) {
      if (str.startsWith("put")) {
        String[] parts = str.split(" ");
        String key = parts[1];
        Integer val = Integer.parseInt(parts[2]);
        map.put(key, val);
      } else if (str.startsWith("get")) {
        String[] parts = str.split(" ");
        String key = parts[1];
        System.out.println(map.get(key));
      } else if (str.startsWith("containsKey")) {
        String[] parts = str.split(" ");
        String key = parts[1];
        System.out.println(map.containsKey(key));
      } else if (str.startsWith("remove")) {
        String[] parts = str.split(" ");
        String key = parts[1];
        System.out.println(map.remove(key));
      } else if (str.startsWith("size")) {
        System.out.println(map.size());
      } else if (str.startsWith("keyset")) {
        System.out.println(map.keyset());
      } else if (str.startsWith("display")) {
        map.display();
      }
      str = br.readLine();
    }
  }
}
